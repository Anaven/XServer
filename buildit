#!/bin/sh
 
VERSION=`grep kVersion revision.h | grep -o [:0123456789:].*[:0123456789:]`
##Build script for Darwin Streaming Server

PLATFORM=$VERSION

SHOW_HELP=0
if [ "$1" = "-v" ] ; then
   SHOW_HELP=1
fi

if [ "$1" = "-h" ] ; then
   SHOW_HELP=1
fi

if [ "$1" = "?" ] ; then
   SHOW_HELP=1
fi

if [ "$1" = "help" ] ; then
   SHOW_HELP=1
fi

if [ $SHOW_HELP = 1 ] ; then
	echo ""
	echo "XServer"
	echo ""
	echo "buildit (builds target dss, symbols, build os, and cpu)"
	echo "buildit dss arg2 (builds target dss, symbols, build os, and cpu, passes to xcode optional arg2)"
	echo "buildit dssfat arg2 (builds target dss, symbols, build os, FAT i386+ppc, passes to xcode optional arg2)"
	echo "buildit dssfullfat arg2 (builds target dss, symbols, build os, FAT i386+x86_64+ppc+ppc64, passes to xcode optional arg2)"
	echo "buildit qtss arg2 (builds target qtss, stripped, build os, and cpu, passes to xcode optional arg2)"
	echo "buildit qtssfat arg2 (builds target qtss, stripped, build os, FAT i386+ppc, passes to xcode optional arg2)"	
	echo "buildit qtssfullfat arg2 (builds target qtss, stripped, build os, FAT i386+x86_64+ppc+ppc64, passes to xcode optional arg2)"

	exit 0
fi

OSNAME=`uname`
HARDWARENAME=`uname -m`
 
PLAT=$OSNAME.$HARDWARENAME

echo "XServer"
echo "-----------------------"


case $PLAT in

	Linux.ppc)
        echo "Configuring for the "$OSNAME" "$HARDWARENAME" platform"
		CPLUS=gcc
		CCOMP=gcc
		LINKER='gcc'
 		MAKE=make
 		
		COMPILER_FLAGS="-D_REENTRANT -D__USE_POSIX -D__linuxppc__ -pipe"
        INCLUDE_FLAG="-include"
		
		CORE_LINK_LIBS="-lpthread -ldl -lstdc++ -lm -lcrypt"

		SHARED=-shared
		MODULE_LIBS=
		
		if [ -f /usr/include/socketbits.h ]; then
			NEED_SOCKETBITS=1
			export NEED_SOCKETBITS
		fi
		;;		

	Linux.i586 | \
	Linux.i686)
        echo "Configuring for the "$OSNAME" "$HARDWARENAME" platform"
		CPLUS=gcc
		CCOMP=gcc
		LINKER='gcc'
 		MAKE=make
 		
		COMPILER_FLAGS="-D_REENTRANT -D__USE_POSIX -D__linux__ -pipe"
        INCLUDE_FLAG="-include"
		
		CORE_LINK_LIBS="-lpthread -lstdc++"

		SHARED=-shared
		MODULE_LIBS=
		
		if [ -f /usr/include/socketbits.h ]; then
			NEED_SOCKETBITS=1
			export NEED_SOCKETBITS
		fi
		;;

	Linux.mips)
        echo "Configuring for the "$OSNAME" "$HARDWARENAME" platform"
		CPLUS=gcc
		CCOMP=gcc
		LINKER='egcs'
 		MAKE=make
 		
		COMPILER_FLAGS="-D_REENTRANT -D__linux__ -Wno-multichar -pipe"
        INCLUDE_FLAG="-include"
		
		CORE_LINK_LIBS="-lpthread -ldl -lm -lcrypt"

		SHARED=-shared
		MODULE_LIBS=
		
		if [ -f /usr/include/socketbits.h ]; then
			NEED_SOCKETBITS=1
			export NEED_SOCKETBITS
		fi
		;;

	FreeBSD.i386)
        echo "Configuring for the "$OSNAME" "$HARDWARENAME" platform"
		CPLUS=gcc
		CCOMP=gcc
		LINKER="gcc"
 		MAKE=make
 		
		COMPILER_FLAGS=
        INCLUDE_FLAG="-include"
		
		CORE_LINK_LIBS="-pthread -lm -lcrypt"

		SHARED=-shared
		MODULE_LIBS="-lgcc -lstdc++"
		;;
	
#	SunOS.sun4m | \
#	SunOS.sun4u)
	SunOS.*)
        echo "Configuring for the "$OSNAME" "$HARDWARENAME" platform"
		CPLUS=g++
		CCOMP=gcc
		LINKER="g++"
 		MAKE=make
 		
		COMPILER_FLAGS="-D__solaris__ -D_REENTRANT -DFD_SETSIZE=65536 -L/usr/local/lib -R/usr/local/lib"
        INCLUDE_FLAG="-include"

		CORE_LINK_LIBS="-lpthread -ldl -lsocket -lnsl -lresolv -lm -lcrypt -lstdc++"

		SHARED=-G
		MODULE_LIBS=
		;;
		
	IRIX*.*)
# IRIX with MipsPro compiler
# Change all references of Makefile.POSIX below to Makefile.IRIX
	echo "Configuring for the "$OSNAME" "$HARDWARENAME" SGI platform"
		CPLUS=CC
		CCOMP=cc
		LINKER="CC"
# GNU make is required. Obtain from freeware.sgi.com
		MAKE=/usr/freeware/bin/gmake
# defines from PlatformHeader.h defined here as MipsPro does not support -include pre-processor directive		
		COMPILER_FLAGS="-D__sgi__ -DirixMipsPro -D_SGI_REENTRANT_FUNCTIONS -DASSERT -D__PTHREADS__ -D__PTHREADS_MUTEXES__ -DBIGENDIAN -DUSE_THREAD -DEXPORT -D_REENTRANT"
		INCLUDE_FLAG=
		CORE_LINK_LIBS="-ldl -lm -lcrypt -lpthread"
		SHARED=-shared
		MODULE_LIBS=
		;;
		
    HP-UX.*)
        echo "Configuring for the "$OSNAME" "$HARDWARENAME" platform"
        CPLUS=gcc
        CCOMP=gcc
        LINKER=gcc
        MAKE=make
 
        COMPILER_FLAGS="-D__hpux__ -g -fPIC"
        INCLUDE_FLAG="-include"
 
        CORE_LINK_LIBS="-lpthread -lnsl -lm -lcrypt -lstdc++"
 
        SHARED=-shared
        MODULE_LIBS="-lgcc -lstdc++"
        ;;
 
 	OSF1.alpha)
         echo "Configuring for the "$OSNAME" "$HARDWARENAME" Tru64 UNIX platform"
 		CPLUS=`pwd`/my_tru64_cxx
 		CCOMP=`pwd`/my_tru64_cc
		LINKER="cxx"
		MAKE=/usr/local/bin/make

 		COMPILER_FLAGS="-D__osf__ -DTRUCLUSTER -pthread"
        INCLUDE_FLAG="-FI"

		CORE_LINK_LIBS="-lpthread -lclu -lm"

		SHARED=-shared
		MODULE_LIBS=
 		;;

	*)
		echo "I don't know your platform. I'll assume this is a Linux x86 platform."
		echo "Please edit the BuildServer script & PlatformHeader.h to add your platform."
		CPLUS=gcc
		CCOMP=gcc
		LINKER='egcs'
 		MAKE=make
 		
		COMPILER_FLAGS=-D__linux__
        INCLUDE_FLAG="-include"

		CORE_LINK_LIBS="-lpthread -ldl -lm -lcrypt"

		SHARED=-shared
		MODULE_LIBS=
		
		if [ -f /usr/include/socketbits.h ]; then
			NEED_SOCKETBITS=1
			export NEED_SOCKETBITS
		fi
		;;
esac

if [ "$*" = "install" ] ; then

        if [ `uname` != "SunOS" ]; then
                USERID=`id -u`
        else
                USERID=`/usr/xpg4/bin/id -u`
        fi

        if [ $USERID != 0 ]; then
                echo "You must be root to perform an \"install\" build"
                exit 1
        fi
fi

echo Building for $PLAT with $CPLUS


export CPLUS
export CCOMP
export LINKER
export COMPILER_FLAGS
export INCLUDE_FLAG
export CORE_LINK_LIBS
export SHARED
export MODULE_LIBS

echo Building UtilitiesLib for $PLAT with $CPLUS
cd UtilitiesLib/
$MAKE -f Makefile $*


echo Building AccessServer for $PLAT with $CPLUS
cd ..

$MAKE -f Makefile $*

#echo Building RefMovieModule for $PLAT with $CPLUS
#cd APIModules/QTSSRefMovieModule/
#$MAKE -f Makefile.POSIX $*

#echo Building DemoAuthorizationModule for $PLAT with $CPLUS
#cd ../QTSSDemoAuthorizationModule.bproj/
#$MAKE -f Makefile.POSIX $*

cd ..