#ifndef __FLASH_CLIENT__
#define __FLASH_CLIENT__

#include "StrPtrLen.h"
#include "Client.h"
#include "NetStream.h"


#define FLASH_CLIENT_DEBUG 1

class FlashClient : public Client
{
	public:

    	FlashClient(char* theAuthName, char* theDeviceID, NetStream* theStream);
        ~FlashClient() { fServer->DecreaseNumVideoSession(); };

		int		Enroll();
		void	Unenroll();
		
		int 	ProcessPacket(char* thePacket, UInt32 thePacketLen);
		void 	Kill(char* theID, int theCode);
		virtual int SendPacket(char* inData, UInt32 inLength);

		int 	BeginAuthorization();
		void 	EndAuthorization();
		
		bool 	HasAuthorizor(FlashClient* theClient);
		bool 	HasUser(FlashClient* theClient);

		char* GetUserName() { MutexLocker theLocker(&fMutex); return fUserName; };
		StrPtrLen* GetUserNameStr() { MutexLocker theLocker(&fMutex); return &fUserNameStr; };

		void 	AddObserver(FlashClient* theClient);
		void 	RemoveObserver(FlashClient* theClient);
		bool	HasObserver(FlashClient* theClient);

		int		GetObserverNum() { MutexLocker theLocker(&fMutex); return fObserverNum; };
    	void 	LuanchExpireTime(SInt64 theTimeInMilSec);

		void 	Broadcast(char* theData, UInt32 theDataLen);
		void	KillAllClients(int theCode);
		bool 	IsAllowObserve() { MutexLocker theLocker(&fMutex); return fAllowObserve; };

		void 	ChangeVideoFormate(int theFormate);
		void	Cleanup();

	private:

		void SendSessionNotFound();
		//void SendUserEnroll();
		void SendAuthorityError();
		//void SendObserverEnroll();
		void SendObserverSaturated();

		int		fObserverNum;
		bool	fAllowObserve;
		
		char*		fUserName;
		StrPtrLen 	fUserNameStr;
			
        char fAuthName[kAuthNameSize];
		char fDeviceID[kDeviceIDSize];
		StrPtrLen fDeviceIDStr;
		
		NetStream* 		fNetStream;
		KeepAliveTask	fKeepAliveTask;

		
		Ref			fAuthRef;
		RefTable 	fObserverRefTable;
};

#endif

